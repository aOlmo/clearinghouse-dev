# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin sqlcustom [app_label]'
# into your database.
from __future__ import unicode_literals

from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup)
    permission = models.ForeignKey('AuthPermission')

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group_id', 'permission_id'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType')
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type_id', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser)
    group = models.ForeignKey(AuthGroup)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user_id', 'group_id'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser)
    permission = models.ForeignKey(AuthPermission)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user_id', 'permission_id'),)


class ControlActionlogevent(models.Model):
    function_name = models.CharField(max_length=50)
    second_arg = models.CharField(max_length=50, blank=True, null=True)
    third_arg = models.CharField(max_length=50, blank=True, null=True)
    was_successful = models.IntegerField()
    message = models.CharField(max_length=1024, blank=True, null=True)
    vessel_count = models.IntegerField(blank=True, null=True)
    date_started = models.DateTimeField()
    completion_time = models.FloatField()
    user = models.ForeignKey('ControlGeniuser', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'control_actionlogevent'


class ControlActionlogvesseldetails(models.Model):
    node_address = models.CharField(max_length=100)
    node_port = models.IntegerField()
    vessel_name = models.CharField(max_length=50)
    event = models.ForeignKey(ControlActionlogevent)
    node = models.ForeignKey('ControlNode')

    class Meta:
        managed = False
        db_table = 'control_actionlogvesseldetails'


class ControlDonation(models.Model):
    status = models.CharField(max_length=100)
    resource_description_text = models.TextField()
    date_created = models.DateTimeField()
    date_modified = models.DateTimeField()
    donor = models.ForeignKey('ControlGeniuser')
    node = models.ForeignKey('ControlNode')

    class Meta:
        managed = False
        db_table = 'control_donation'
        unique_together = (('node_id', 'donor_id'),)


class ControlGeniuser(models.Model):
    user_ptr = models.ForeignKey(AuthUser, primary_key=True)
    usable_vessel_port = models.IntegerField()
    affiliation = models.CharField(max_length=200)
    user_pubkey = models.CharField(max_length=2048)
    user_privkey = models.CharField(max_length=4096, blank=True, null=True)
    api_key = models.CharField(max_length=100)
    donor_pubkey = models.CharField(max_length=2048)
    free_vessel_credits = models.IntegerField()
    date_created = models.DateTimeField()
    date_modified = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'control_geniuser'


class ControlNode(models.Model):
    node_identifier = models.CharField(max_length=2048)
    last_known_ip = models.CharField(max_length=100)
    last_known_port = models.IntegerField()
    last_known_version = models.CharField(max_length=64)
    date_last_contacted = models.DateTimeField()
    is_active = models.IntegerField()
    is_broken = models.IntegerField()
    owner_pubkey = models.CharField(max_length=2048)
    extra_vessel_name = models.CharField(max_length=8)
    date_created = models.DateTimeField()
    date_modified = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'control_node'


class ControlVessel(models.Model):
    name = models.CharField(max_length=50)
    date_acquired = models.DateTimeField(blank=True, null=True)
    date_expires = models.DateTimeField(blank=True, null=True)
    is_dirty = models.IntegerField()
    user_keys_in_sync = models.IntegerField()
    date_created = models.DateTimeField()
    date_modified = models.DateTimeField()
    acquired_by_user = models.ForeignKey(ControlGeniuser, blank=True, null=True)
    node = models.ForeignKey(ControlNode)

    class Meta:
        managed = False
        db_table = 'control_vessel'
        unique_together = (('node_id', 'name'),)


class ControlVesselport(models.Model):
    port = models.IntegerField()
    vessel = models.ForeignKey(ControlVessel)

    class Meta:
        managed = False
        db_table = 'control_vesselport'
        unique_together = (('vessel_id', 'port'),)


class ControlVesseluseraccessmap(models.Model):
    date_created = models.DateTimeField()
    user = models.ForeignKey(ControlGeniuser)
    vessel = models.ForeignKey(ControlVessel)

    class Meta:
        managed = False
        db_table = 'control_vesseluseraccessmap'
        unique_together = (('vessel_id', 'user_id'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', blank=True, null=True)
    user = models.ForeignKey(AuthUser)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class DjangoSite(models.Model):
    domain = models.CharField(max_length=100)
    name = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'django_site'


class SocialAuthAssociation(models.Model):
    server_url = models.CharField(max_length=255)
    handle = models.CharField(max_length=255)
    secret = models.CharField(max_length=255)
    issued = models.IntegerField()
    lifetime = models.IntegerField()
    assoc_type = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'social_auth_association'
        unique_together = (('server_url', 'handle'),)


class SocialAuthNonce(models.Model):
    server_url = models.CharField(max_length=255)
    timestamp = models.IntegerField()
    salt = models.CharField(max_length=40)

    class Meta:
        managed = False
        db_table = 'social_auth_nonce'
        unique_together = (('server_url', 'timestamp', 'salt'),)


class SocialAuthUsersocialauth(models.Model):
    user_id = models.IntegerField()
    provider = models.CharField(max_length=32)
    uid = models.CharField(max_length=255)
    extra_data = models.TextField()

    class Meta:
        managed = False
        db_table = 'social_auth_usersocialauth'
        unique_together = (('provider', 'uid'),)
